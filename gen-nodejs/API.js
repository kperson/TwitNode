//
// Autogenerated by Thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = require('./twitservice_types');
//HELPER FUNCTIONS AND STRUCTURES

var API_getPortfolio_args = function(args){
  this.memberId = null
  this.order = null
  this.login = null
if( args != null ){  if (null != args.memberId)
  this.memberId = args.memberId
  if (null != args.order)
  this.order = args.order
  if (null != args.login)
  this.login = args.login
}}
API_getPortfolio_args.prototype = {}
API_getPortfolio_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.memberId = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.I32) {
        this.order = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.login = new ttypes.Credential()
        this.login.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

API_getPortfolio_args.prototype.write = function(output){ 
  output.writeStructBegin('API_getPortfolio_args')
  if (null != this.memberId) {
    output.writeFieldBegin('memberId', Thrift.Type.STRING, 1)
    output.writeString(this.memberId)
    output.writeFieldEnd()
  }
  if (null != this.order) {
    output.writeFieldBegin('order', Thrift.Type.I32, 2)
    output.writeI32(this.order)
    output.writeFieldEnd()
  }
  if (null != this.login) {
    output.writeFieldBegin('login', Thrift.Type.STRUCT, 3)
    this.login.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var API_getPortfolio_result = function(args){
  this.success = null
if( args != null ){  if (null != args.success)
  this.success = args.success
}}
API_getPortfolio_result.prototype = {}
API_getPortfolio_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.LIST) {
        {
          var _size16 = 0
          var rtmp3
          this.success = []
          var _etype19 = 0
          rtmp3 = input.readListBegin()
          _etype19 = rtmp3.etype
          _size16 = rtmp3.size
          for (var _i20 = 0; _i20 < _size16; ++_i20)
          {
            var elem21 = null
            elem21 = new ttypes.Company()
            elem21.read(input)
            this.success.push(elem21)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

API_getPortfolio_result.prototype.write = function(output){ 
  output.writeStructBegin('API_getPortfolio_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length)
      {
        for(var iter22 in this.success)
        {
          if (this.success.hasOwnProperty(iter22))
          {
            iter22=this.success[iter22]
            iter22.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var API_addToPortfolio_args = function(args){
  this.memberId = null
  this.ticker = null
  this.login = null
if( args != null ){  if (null != args.memberId)
  this.memberId = args.memberId
  if (null != args.ticker)
  this.ticker = args.ticker
  if (null != args.login)
  this.login = args.login
}}
API_addToPortfolio_args.prototype = {}
API_addToPortfolio_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.memberId = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.ticker = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.login = new ttypes.Credential()
        this.login.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

API_addToPortfolio_args.prototype.write = function(output){ 
  output.writeStructBegin('API_addToPortfolio_args')
  if (null != this.memberId) {
    output.writeFieldBegin('memberId', Thrift.Type.STRING, 1)
    output.writeString(this.memberId)
    output.writeFieldEnd()
  }
  if (null != this.ticker) {
    output.writeFieldBegin('ticker', Thrift.Type.STRING, 2)
    output.writeString(this.ticker)
    output.writeFieldEnd()
  }
  if (null != this.login) {
    output.writeFieldBegin('login', Thrift.Type.STRUCT, 3)
    this.login.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var API_addToPortfolio_result = function(args){
}
API_addToPortfolio_result.prototype = {}
API_addToPortfolio_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

API_addToPortfolio_result.prototype.write = function(output){ 
  output.writeStructBegin('API_addToPortfolio_result')
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var API_removeFromPortfolio_args = function(args){
  this.memberId = null
  this.ticker = null
  this.login = null
if( args != null ){  if (null != args.memberId)
  this.memberId = args.memberId
  if (null != args.ticker)
  this.ticker = args.ticker
  if (null != args.login)
  this.login = args.login
}}
API_removeFromPortfolio_args.prototype = {}
API_removeFromPortfolio_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.memberId = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.ticker = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.login = new ttypes.Credential()
        this.login.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

API_removeFromPortfolio_args.prototype.write = function(output){ 
  output.writeStructBegin('API_removeFromPortfolio_args')
  if (null != this.memberId) {
    output.writeFieldBegin('memberId', Thrift.Type.STRING, 1)
    output.writeString(this.memberId)
    output.writeFieldEnd()
  }
  if (null != this.ticker) {
    output.writeFieldBegin('ticker', Thrift.Type.STRING, 2)
    output.writeString(this.ticker)
    output.writeFieldEnd()
  }
  if (null != this.login) {
    output.writeFieldBegin('login', Thrift.Type.STRUCT, 3)
    this.login.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var API_removeFromPortfolio_result = function(args){
}
API_removeFromPortfolio_result.prototype = {}
API_removeFromPortfolio_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

API_removeFromPortfolio_result.prototype.write = function(output){ 
  output.writeStructBegin('API_removeFromPortfolio_result')
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var API_createMember_args = function(args){
  this.login = null
if( args != null ){  if (null != args.login)
  this.login = args.login
}}
API_createMember_args.prototype = {}
API_createMember_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.login = new ttypes.Credential()
        this.login.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

API_createMember_args.prototype.write = function(output){ 
  output.writeStructBegin('API_createMember_args')
  if (null != this.login) {
    output.writeFieldBegin('login', Thrift.Type.STRUCT, 1)
    this.login.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var API_createMember_result = function(args){
  this.success = null
if( args != null ){  if (null != args.success)
  this.success = args.success
}}
API_createMember_result.prototype = {}
API_createMember_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

API_createMember_result.prototype.write = function(output){ 
  output.writeStructBegin('API_createMember_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0)
    output.writeString(this.success)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var API_searchTweets_args = function(args){
  this.term = null
  this.memberId = null
  this.companyName = null
  this.ticker = null
  this.since = null
  this.slug = null
  this.industry = null
  this.handle = null
  this.industrySlug = null
  this.sector = null
  this.sectorSlug = null
  this.showSlugs = false
  this.searchOrder = null
  this.searchDirection = null
  this.start = 0
  this.limit = 50
  this.score = null
  this.login = null
if( args != null ){  if (null != args.term)
  this.term = args.term
  if (null != args.memberId)
  this.memberId = args.memberId
  if (null != args.companyName)
  this.companyName = args.companyName
  if (null != args.ticker)
  this.ticker = args.ticker
  if (null != args.since)
  this.since = args.since
  if (null != args.slug)
  this.slug = args.slug
  if (null != args.industry)
  this.industry = args.industry
  if (null != args.handle)
  this.handle = args.handle
  if (null != args.industrySlug)
  this.industrySlug = args.industrySlug
  if (null != args.sector)
  this.sector = args.sector
  if (null != args.sectorSlug)
  this.sectorSlug = args.sectorSlug
  if (null != args.showSlugs)
  this.showSlugs = args.showSlugs
  if (null != args.searchOrder)
  this.searchOrder = args.searchOrder
  if (null != args.searchDirection)
  this.searchDirection = args.searchDirection
  if (null != args.start)
  this.start = args.start
  if (null != args.limit)
  this.limit = args.limit
  if (null != args.score)
  this.score = args.score
  if (null != args.login)
  this.login = args.login
}}
API_searchTweets_args.prototype = {}
API_searchTweets_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.term = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.memberId = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRING) {
        this.companyName = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.STRING) {
        this.ticker = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 5:      if (ftype == Thrift.Type.I32) {
        this.since = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 6:      if (ftype == Thrift.Type.STRING) {
        this.slug = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 7:      if (ftype == Thrift.Type.STRING) {
        this.industry = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 8:      if (ftype == Thrift.Type.STRING) {
        this.handle = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 9:      if (ftype == Thrift.Type.STRING) {
        this.industrySlug = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 10:      if (ftype == Thrift.Type.STRING) {
        this.sector = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 11:      if (ftype == Thrift.Type.STRING) {
        this.sectorSlug = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 12:      if (ftype == Thrift.Type.BOOL) {
        this.showSlugs = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      case 13:      if (ftype == Thrift.Type.I32) {
        this.searchOrder = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 14:      if (ftype == Thrift.Type.I32) {
        this.searchDirection = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 15:      if (ftype == Thrift.Type.I32) {
        this.start = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 16:      if (ftype == Thrift.Type.I32) {
        this.limit = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 17:      if (ftype == Thrift.Type.DOUBLE) {
        this.score = input.readDouble()
      } else {
        input.skip(ftype)
      }
      break
      case 18:      if (ftype == Thrift.Type.STRUCT) {
        this.login = new ttypes.Credential()
        this.login.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

API_searchTweets_args.prototype.write = function(output){ 
  output.writeStructBegin('API_searchTweets_args')
  if (null != this.term) {
    output.writeFieldBegin('term', Thrift.Type.STRING, 1)
    output.writeString(this.term)
    output.writeFieldEnd()
  }
  if (null != this.memberId) {
    output.writeFieldBegin('memberId', Thrift.Type.STRING, 2)
    output.writeString(this.memberId)
    output.writeFieldEnd()
  }
  if (null != this.companyName) {
    output.writeFieldBegin('companyName', Thrift.Type.STRING, 3)
    output.writeString(this.companyName)
    output.writeFieldEnd()
  }
  if (null != this.ticker) {
    output.writeFieldBegin('ticker', Thrift.Type.STRING, 4)
    output.writeString(this.ticker)
    output.writeFieldEnd()
  }
  if (null != this.since) {
    output.writeFieldBegin('since', Thrift.Type.I32, 5)
    output.writeI32(this.since)
    output.writeFieldEnd()
  }
  if (null != this.slug) {
    output.writeFieldBegin('slug', Thrift.Type.STRING, 6)
    output.writeString(this.slug)
    output.writeFieldEnd()
  }
  if (null != this.industry) {
    output.writeFieldBegin('industry', Thrift.Type.STRING, 7)
    output.writeString(this.industry)
    output.writeFieldEnd()
  }
  if (null != this.handle) {
    output.writeFieldBegin('handle', Thrift.Type.STRING, 8)
    output.writeString(this.handle)
    output.writeFieldEnd()
  }
  if (null != this.industrySlug) {
    output.writeFieldBegin('industrySlug', Thrift.Type.STRING, 9)
    output.writeString(this.industrySlug)
    output.writeFieldEnd()
  }
  if (null != this.sector) {
    output.writeFieldBegin('sector', Thrift.Type.STRING, 10)
    output.writeString(this.sector)
    output.writeFieldEnd()
  }
  if (null != this.sectorSlug) {
    output.writeFieldBegin('sectorSlug', Thrift.Type.STRING, 11)
    output.writeString(this.sectorSlug)
    output.writeFieldEnd()
  }
  if (null != this.showSlugs) {
    output.writeFieldBegin('showSlugs', Thrift.Type.BOOL, 12)
    output.writeBool(this.showSlugs)
    output.writeFieldEnd()
  }
  if (null != this.searchOrder) {
    output.writeFieldBegin('searchOrder', Thrift.Type.I32, 13)
    output.writeI32(this.searchOrder)
    output.writeFieldEnd()
  }
  if (null != this.searchDirection) {
    output.writeFieldBegin('searchDirection', Thrift.Type.I32, 14)
    output.writeI32(this.searchDirection)
    output.writeFieldEnd()
  }
  if (null != this.start) {
    output.writeFieldBegin('start', Thrift.Type.I32, 15)
    output.writeI32(this.start)
    output.writeFieldEnd()
  }
  if (null != this.limit) {
    output.writeFieldBegin('limit', Thrift.Type.I32, 16)
    output.writeI32(this.limit)
    output.writeFieldEnd()
  }
  if (null != this.score) {
    output.writeFieldBegin('score', Thrift.Type.DOUBLE, 17)
    output.writeDouble(this.score)
    output.writeFieldEnd()
  }
  if (null != this.login) {
    output.writeFieldBegin('login', Thrift.Type.STRUCT, 18)
    this.login.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var API_searchTweets_result = function(args){
  this.success = null
if( args != null ){  if (null != args.success)
  this.success = args.success
}}
API_searchTweets_result.prototype = {}
API_searchTweets_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Search()
        this.success.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

API_searchTweets_result.prototype.write = function(output){ 
  output.writeStructBegin('API_searchTweets_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var API_writeKeys_args = function(args){
  this.kvPairs = null
  this.memberId = null
  this.login = null
if( args != null ){  if (null != args.kvPairs)
  this.kvPairs = args.kvPairs
  if (null != args.memberId)
  this.memberId = args.memberId
  if (null != args.login)
  this.login = args.login
}}
API_writeKeys_args.prototype = {}
API_writeKeys_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.LIST) {
        {
          var _size23 = 0
          var rtmp3
          this.kvPairs = []
          var _etype26 = 0
          rtmp3 = input.readListBegin()
          _etype26 = rtmp3.etype
          _size23 = rtmp3.size
          for (var _i27 = 0; _i27 < _size23; ++_i27)
          {
            var elem28 = null
            elem28 = new ttypes.KV()
            elem28.read(input)
            this.kvPairs.push(elem28)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.memberId = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.login = new ttypes.Credential()
        this.login.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

API_writeKeys_args.prototype.write = function(output){ 
  output.writeStructBegin('API_writeKeys_args')
  if (null != this.kvPairs) {
    output.writeFieldBegin('kvPairs', Thrift.Type.LIST, 1)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.kvPairs.length)
      {
        for(var iter29 in this.kvPairs)
        {
          if (this.kvPairs.hasOwnProperty(iter29))
          {
            iter29=this.kvPairs[iter29]
            iter29.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.memberId) {
    output.writeFieldBegin('memberId', Thrift.Type.STRING, 2)
    output.writeString(this.memberId)
    output.writeFieldEnd()
  }
  if (null != this.login) {
    output.writeFieldBegin('login', Thrift.Type.STRUCT, 3)
    this.login.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var API_writeKeys_result = function(args){
}
API_writeKeys_result.prototype = {}
API_writeKeys_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

API_writeKeys_result.prototype.write = function(output){ 
  output.writeStructBegin('API_writeKeys_result')
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var API_deleteKeys_args = function(args){
  this.keys = null
  this.memberId = null
  this.login = null
if( args != null ){  if (null != args.keys)
  this.keys = args.keys
  if (null != args.memberId)
  this.memberId = args.memberId
  if (null != args.login)
  this.login = args.login
}}
API_deleteKeys_args.prototype = {}
API_deleteKeys_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.LIST) {
        {
          var _size30 = 0
          var rtmp3
          this.keys = []
          var _etype33 = 0
          rtmp3 = input.readListBegin()
          _etype33 = rtmp3.etype
          _size30 = rtmp3.size
          for (var _i34 = 0; _i34 < _size30; ++_i34)
          {
            var elem35 = null
            elem35 = input.readString()
            this.keys.push(elem35)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.memberId = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.login = new ttypes.Credential()
        this.login.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

API_deleteKeys_args.prototype.write = function(output){ 
  output.writeStructBegin('API_deleteKeys_args')
  if (null != this.keys) {
    output.writeFieldBegin('keys', Thrift.Type.LIST, 1)
    {
      output.writeListBegin(Thrift.Type.STRING, this.keys.length)
      {
        for(var iter36 in this.keys)
        {
          if (this.keys.hasOwnProperty(iter36))
          {
            iter36=this.keys[iter36]
            output.writeString(iter36)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.memberId) {
    output.writeFieldBegin('memberId', Thrift.Type.STRING, 2)
    output.writeString(this.memberId)
    output.writeFieldEnd()
  }
  if (null != this.login) {
    output.writeFieldBegin('login', Thrift.Type.STRUCT, 3)
    this.login.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var API_deleteKeys_result = function(args){
}
API_deleteKeys_result.prototype = {}
API_deleteKeys_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

API_deleteKeys_result.prototype.write = function(output){ 
  output.writeStructBegin('API_deleteKeys_result')
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var API_readKeys_args = function(args){
  this.keys = null
  this.criteria = null
  this.memberId = null
  this.login = null
if( args != null ){  if (null != args.keys)
  this.keys = args.keys
  if (null != args.criteria)
  this.criteria = args.criteria
  if (null != args.memberId)
  this.memberId = args.memberId
  if (null != args.login)
  this.login = args.login
}}
API_readKeys_args.prototype = {}
API_readKeys_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.LIST) {
        {
          var _size37 = 0
          var rtmp3
          this.keys = []
          var _etype40 = 0
          rtmp3 = input.readListBegin()
          _etype40 = rtmp3.etype
          _size37 = rtmp3.size
          for (var _i41 = 0; _i41 < _size37; ++_i41)
          {
            var elem42 = null
            elem42 = input.readString()
            this.keys.push(elem42)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.MAP) {
        {
          var _size43 = 0
          var rtmp3
          this.criteria = {}
          var _ktype44 = 0
          var _vtype45 = 0
          rtmp3 = input.readMapBegin()
          _ktype44= rtmp3.ktype
          _vtype45= rtmp3.vtype
          _size43= rtmp3.size
          for (var _i47 = 0; _i47 < _size43; ++_i47)
          {
            key48 = null
            val49 = null
            key48 = input.readString()
            val49 = input.readString()
            this.criteria[key48] = val49
          }
          input.readMapEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRING) {
        this.memberId = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.STRUCT) {
        this.login = new ttypes.Credential()
        this.login.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

API_readKeys_args.prototype.write = function(output){ 
  output.writeStructBegin('API_readKeys_args')
  if (null != this.keys) {
    output.writeFieldBegin('keys', Thrift.Type.LIST, 1)
    {
      output.writeListBegin(Thrift.Type.STRING, this.keys.length)
      {
        for(var iter50 in this.keys)
        {
          if (this.keys.hasOwnProperty(iter50))
          {
            iter50=this.keys[iter50]
            output.writeString(iter50)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.criteria) {
    output.writeFieldBegin('criteria', Thrift.Type.MAP, 2)
    {
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.criteria))
      {
        for(var kiter51 in this.criteria)        {
          if (this.criteria.hasOwnProperty(kiter51))
          {
            var viter52 = this.criteria[kiter51]
            output.writeString(kiter51)
            output.writeString(viter52)
          }
        }
      }
      output.writeMapEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.memberId) {
    output.writeFieldBegin('memberId', Thrift.Type.STRING, 3)
    output.writeString(this.memberId)
    output.writeFieldEnd()
  }
  if (null != this.login) {
    output.writeFieldBegin('login', Thrift.Type.STRUCT, 4)
    this.login.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var API_readKeys_result = function(args){
  this.success = null
if( args != null ){  if (null != args.success)
  this.success = args.success
}}
API_readKeys_result.prototype = {}
API_readKeys_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.LIST) {
        {
          var _size53 = 0
          var rtmp3
          this.success = []
          var _etype56 = 0
          rtmp3 = input.readListBegin()
          _etype56 = rtmp3.etype
          _size53 = rtmp3.size
          for (var _i57 = 0; _i57 < _size53; ++_i57)
          {
            var elem58 = null
            {
              var _size59 = 0
              var rtmp3
              elem58 = {}
              var _ktype60 = 0
              var _vtype61 = 0
              rtmp3 = input.readMapBegin()
              _ktype60= rtmp3.ktype
              _vtype61= rtmp3.vtype
              _size59= rtmp3.size
              for (var _i63 = 0; _i63 < _size59; ++_i63)
              {
                key64 = null
                val65 = null
                key64 = input.readString()
                val65 = input.readString()
                elem58[key64] = val65
              }
              input.readMapEnd()
            }
            this.success.push(elem58)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

API_readKeys_result.prototype.write = function(output){ 
  output.writeStructBegin('API_readKeys_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    {
      output.writeListBegin(Thrift.Type.MAP, this.success.length)
      {
        for(var iter66 in this.success)
        {
          if (this.success.hasOwnProperty(iter66))
          {
            iter66=this.success[iter66]
            {
              output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(iter66))
              {
                for(var kiter67 in iter66)                {
                  if (iter66.hasOwnProperty(kiter67))
                  {
                    var viter68 = iter66[kiter67]
                    output.writeString(kiter67)
                    output.writeString(viter68)
                  }
                }
              }
              output.writeMapEnd()
            }
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var APIClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {}
}
APIClient.prototype = {}
APIClient.prototype.getPortfolio = function(memberId,order,login,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_getPortfolio(memberId, order, login)
}

APIClient.prototype.send_getPortfolio = function(memberId,order,login){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPortfolio', Thrift.MessageType.CALL, this.seqid)
  var args = new API_getPortfolio_args()
  args.memberId = memberId
  args.order = order
  args.login = login
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

APIClient.prototype.recv_getPortfolio = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new API_getPortfolio_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("getPortfolio failed: unknown result");
}
APIClient.prototype.addToPortfolio = function(memberId,ticker,login,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_addToPortfolio(memberId, ticker, login)
}

APIClient.prototype.send_addToPortfolio = function(memberId,ticker,login){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addToPortfolio', Thrift.MessageType.CALL, this.seqid)
  var args = new API_addToPortfolio_args()
  args.memberId = memberId
  args.ticker = ticker
  args.login = login
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

APIClient.prototype.recv_addToPortfolio = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new API_addToPortfolio_result()
  result.read(input)
  input.readMessageEnd()

  callback(null)
}
APIClient.prototype.removeFromPortfolio = function(memberId,ticker,login,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_removeFromPortfolio(memberId, ticker, login)
}

APIClient.prototype.send_removeFromPortfolio = function(memberId,ticker,login){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('removeFromPortfolio', Thrift.MessageType.CALL, this.seqid)
  var args = new API_removeFromPortfolio_args()
  args.memberId = memberId
  args.ticker = ticker
  args.login = login
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

APIClient.prototype.recv_removeFromPortfolio = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new API_removeFromPortfolio_result()
  result.read(input)
  input.readMessageEnd()

  callback(null)
}
APIClient.prototype.createMember = function(login,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_createMember(login)
}

APIClient.prototype.send_createMember = function(login){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createMember', Thrift.MessageType.CALL, this.seqid)
  var args = new API_createMember_args()
  args.login = login
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

APIClient.prototype.recv_createMember = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new API_createMember_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("createMember failed: unknown result");
}
APIClient.prototype.searchTweets = function(term,memberId,companyName,ticker,since,slug,industry,handle,industrySlug,sector,sectorSlug,showSlugs,searchOrder,searchDirection,start,limit,score,login,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_searchTweets(term, memberId, companyName, ticker, since, slug, industry, handle, industrySlug, sector, sectorSlug, showSlugs, searchOrder, searchDirection, start, limit, score, login)
}

APIClient.prototype.send_searchTweets = function(term,memberId,companyName,ticker,since,slug,industry,handle,industrySlug,sector,sectorSlug,showSlugs,searchOrder,searchDirection,start,limit,score,login){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('searchTweets', Thrift.MessageType.CALL, this.seqid)
  var args = new API_searchTweets_args()
  args.term = term
  args.memberId = memberId
  args.companyName = companyName
  args.ticker = ticker
  args.since = since
  args.slug = slug
  args.industry = industry
  args.handle = handle
  args.industrySlug = industrySlug
  args.sector = sector
  args.sectorSlug = sectorSlug
  args.showSlugs = showSlugs
  args.searchOrder = searchOrder
  args.searchDirection = searchDirection
  args.start = start
  args.limit = limit
  args.score = score
  args.login = login
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

APIClient.prototype.recv_searchTweets = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new API_searchTweets_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("searchTweets failed: unknown result");
}
APIClient.prototype.writeKeys = function(kvPairs,memberId,login,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_writeKeys(kvPairs, memberId, login)
}

APIClient.prototype.send_writeKeys = function(kvPairs,memberId,login){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('writeKeys', Thrift.MessageType.CALL, this.seqid)
  var args = new API_writeKeys_args()
  args.kvPairs = kvPairs
  args.memberId = memberId
  args.login = login
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

APIClient.prototype.recv_writeKeys = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new API_writeKeys_result()
  result.read(input)
  input.readMessageEnd()

  callback(null)
}
APIClient.prototype.deleteKeys = function(keys,memberId,login,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_deleteKeys(keys, memberId, login)
}

APIClient.prototype.send_deleteKeys = function(keys,memberId,login){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteKeys', Thrift.MessageType.CALL, this.seqid)
  var args = new API_deleteKeys_args()
  args.keys = keys
  args.memberId = memberId
  args.login = login
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

APIClient.prototype.recv_deleteKeys = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new API_deleteKeys_result()
  result.read(input)
  input.readMessageEnd()

  callback(null)
}
APIClient.prototype.readKeys = function(keys,criteria,memberId,login,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_readKeys(keys, criteria, memberId, login)
}

APIClient.prototype.send_readKeys = function(keys,criteria,memberId,login){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('readKeys', Thrift.MessageType.CALL, this.seqid)
  var args = new API_readKeys_args()
  args.keys = keys
  args.criteria = criteria
  args.memberId = memberId
  args.login = login
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

APIClient.prototype.recv_readKeys = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new API_readKeys_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("readKeys failed: unknown result");
}
var APIProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
APIProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin()
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output)
  } else {
    input.skip(Thrift.Type.STRUCT)
    input.readMessageEnd()
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname)
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid)
    x.write(output)
    output.writeMessageEnd()
    output.flush()
  }
}

APIProcessor.prototype.process_getPortfolio = function(seqid, input, output) {
  var args = new API_getPortfolio_args()
  args.read(input)
  input.readMessageEnd()
  var result = new API_getPortfolio_result()
  this._handler.getPortfolio(args.memberId, args.order, args.login, function(success) {
    result.success = success
    output.writeMessageBegin("getPortfolio", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

APIProcessor.prototype.process_addToPortfolio = function(seqid, input, output) {
  var args = new API_addToPortfolio_args()
  args.read(input)
  input.readMessageEnd()
  var result = new API_addToPortfolio_result()
  this._handler.addToPortfolio(args.memberId, args.ticker, args.login, function(success) {
    result.success = success
    output.writeMessageBegin("addToPortfolio", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

APIProcessor.prototype.process_removeFromPortfolio = function(seqid, input, output) {
  var args = new API_removeFromPortfolio_args()
  args.read(input)
  input.readMessageEnd()
  var result = new API_removeFromPortfolio_result()
  this._handler.removeFromPortfolio(args.memberId, args.ticker, args.login, function(success) {
    result.success = success
    output.writeMessageBegin("removeFromPortfolio", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

APIProcessor.prototype.process_createMember = function(seqid, input, output) {
  var args = new API_createMember_args()
  args.read(input)
  input.readMessageEnd()
  var result = new API_createMember_result()
  this._handler.createMember(args.login, function(success) {
    result.success = success
    output.writeMessageBegin("createMember", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

APIProcessor.prototype.process_searchTweets = function(seqid, input, output) {
  var args = new API_searchTweets_args()
  args.read(input)
  input.readMessageEnd()
  var result = new API_searchTweets_result()
  this._handler.searchTweets(args.term, args.memberId, args.companyName, args.ticker, args.since, args.slug, args.industry, args.handle, args.industrySlug, args.sector, args.sectorSlug, args.showSlugs, args.searchOrder, args.searchDirection, args.start, args.limit, args.score, args.login, function(success) {
    result.success = success
    output.writeMessageBegin("searchTweets", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

APIProcessor.prototype.process_writeKeys = function(seqid, input, output) {
  var args = new API_writeKeys_args()
  args.read(input)
  input.readMessageEnd()
  var result = new API_writeKeys_result()
  this._handler.writeKeys(args.kvPairs, args.memberId, args.login, function(success) {
    result.success = success
    output.writeMessageBegin("writeKeys", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

APIProcessor.prototype.process_deleteKeys = function(seqid, input, output) {
  var args = new API_deleteKeys_args()
  args.read(input)
  input.readMessageEnd()
  var result = new API_deleteKeys_result()
  this._handler.deleteKeys(args.keys, args.memberId, args.login, function(success) {
    result.success = success
    output.writeMessageBegin("deleteKeys", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

APIProcessor.prototype.process_readKeys = function(seqid, input, output) {
  var args = new API_readKeys_args()
  args.read(input)
  input.readMessageEnd()
  var result = new API_readKeys_result()
  this._handler.readKeys(args.keys, args.criteria, args.memberId, args.login, function(success) {
    result.success = success
    output.writeMessageBegin("readKeys", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

